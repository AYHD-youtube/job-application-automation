# credentials_config.template.py
"""
TEMPLATE for credentials configuration
Copy this file to 'credentials_config.py' and fill in your actual values

INSTRUCTIONS:
1. Copy this file: cp credentials_config.template.py credentials_config.py
2. Edit credentials_config.py with your actual API keys
3. Never commit credentials_config.py (it's in .gitignore)
"""
import os

# ============================================================================
# API KEYS - Get these from the respective services
# ============================================================================

# Google Gemini AI API Key
# Get from: https://makersuite.google.com/app/apikey
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY", "")
# Or set directly (replace the empty string):
# GOOGLE_API_KEY = "your-gemini-api-key-here"

# Hunter.io API Key  
# Get from: https://hunter.io/api
HUNTER_API_KEY = os.getenv("HUNTER_API_KEY", "")
# Or set directly (replace the empty string):
# HUNTER_API_KEY = "your-hunter-api-key-here"

# ============================================================================
# GOOGLE DRIVE & GMAIL
# ============================================================================

# Google OAuth Credentials
# These files should be in the same directory as this script
GOOGLE_CREDENTIALS_FILE = "credentials.json"  # Download from Google Cloud Console
GOOGLE_TOKEN_FILE = "token.json"              # Auto-generated by auth_bootstrap.py

# ============================================================================
# RESUME CONFIGURATION
# ============================================================================

# Google Drive Resume File ID
# Get from your Google Drive file URL: https://drive.google.com/file/d/FILE_ID_HERE/view
RESUME_FILE_ID = ""
# Example: RESUME_FILE_ID = "1bL2OsAi02zmX-NylZLr1SKgRQks5ou1o"

# Resume Google Drive sharing link (for cover letters)
RESUME_URL = ""
# Example: RESUME_URL = "https://drive.google.com/file/d/YOUR_FILE_ID/view?usp=sharing"

# ============================================================================
# EMAIL CONFIGURATION
# ============================================================================

# Your name (used in email signature)
SENDER_NAME = "Your Name"

# Your email address (Gmail account used for sending)
SENDER_EMAIL = "your.email@gmail.com"

# ============================================================================
# LINKEDIN CONFIGURATION (OPTIONAL)
# ============================================================================

# LinkedIn Session Cookie (li_at value) - OPTIONAL but recommended
# This helps avoid rate limiting when scraping LinkedIn
# 
# HOW TO GET YOUR LINKEDIN COOKIE:
# 1. Open LinkedIn in your browser and log in
# 2. Open Developer Tools (F12 or right-click → Inspect)
# 3. Go to the "Application" or "Storage" tab
# 4. Under "Cookies" → "https://www.linkedin.com"
# 5. Find the cookie named "li_at"
# 6. Copy its value and paste it below
#
# SECURITY NOTE: This cookie grants access to your LinkedIn account.
# Keep it secure and never share it. It's in .gitignore for safety.
#
LINKEDIN_COOKIE = None
# Or set directly (replace None with your cookie string):
# LINKEDIN_COOKIE = "your-li_at-cookie-value-here"

# ============================================================================
# VALIDATION
# ============================================================================

def validate_credentials():
    """
    Validate that all required credentials are set
    Returns: (is_valid, missing_items)
    """
    missing = []
    
    if not GOOGLE_API_KEY:
        missing.append("GOOGLE_API_KEY (required for AI scoring)")
    
    if not HUNTER_API_KEY:
        missing.append("HUNTER_API_KEY (required for email discovery)")
    
    if not RESUME_FILE_ID:
        missing.append("RESUME_FILE_ID (required for resume download)")
    
    if not SENDER_EMAIL or SENDER_EMAIL == "your.email@gmail.com":
        missing.append("SENDER_EMAIL (required for sending emails)")
    
    if not os.path.exists(GOOGLE_CREDENTIALS_FILE):
        missing.append(f"{GOOGLE_CREDENTIALS_FILE} (download from Google Cloud Console)")
    
    is_valid = len(missing) == 0
    return is_valid, missing


def print_credentials_status():
    """Print the status of all credentials (masked for security)"""
    def mask(value):
        if not value:
            return "❌ NOT SET"
        if len(value) > 10:
            return f"✓ {value[:8]}...{value[-4:]}"
        return "✓ SET"
    
    print("\n" + "="*60)
    print("CREDENTIALS STATUS")
    print("="*60)
    print(f"Google Gemini API Key:  {mask(GOOGLE_API_KEY)}")
    print(f"Hunter.io API Key:      {mask(HUNTER_API_KEY)}")
    print(f"Resume File ID:         {mask(RESUME_FILE_ID)}")
    print(f"Sender Email:           {SENDER_EMAIL if SENDER_EMAIL else '❌ NOT SET'}")
    print(f"Sender Name:            {SENDER_NAME if SENDER_NAME else '❌ NOT SET'}")
    print(f"Google Credentials:     {'✓ EXISTS' if os.path.exists(GOOGLE_CREDENTIALS_FILE) else '❌ NOT FOUND'}")
    print(f"Google Token:           {'✓ EXISTS' if os.path.exists(GOOGLE_TOKEN_FILE) else '⚠ Not generated yet'}")
    print("="*60)
    
    is_valid, missing = validate_credentials()
    if is_valid:
        print("✅ All required credentials are configured!")
    else:
        print("\n❌ Missing credentials:")
        for item in missing:
            print(f"   - {item}")
    print("="*60 + "\n")
    
    return is_valid


if __name__ == "__main__":
    # Run this file directly to check your credentials status
    print_credentials_status()

